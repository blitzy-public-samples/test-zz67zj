# Requirement: Monitoring and Observability (Technical Specification/7.4 Cross-Cutting Concerns/7.4.1 Monitoring and Observability)
# Provides configuration for Alertmanager to handle alerts triggered by Prometheus and route them to appropriate notification channels.

global:
  resolve_timeout: 5m
  smtp_from: 'alertmanager@dogwalker.local'
  smtp_smarthost: 'smtp.dogwalker.local:587'
  smtp_require_tls: true
  smtp_auth_username: 'alertmanager'
  smtp_auth_password: '${SMTP_PASSWORD}'  # Set via environment variable

templates:
  - 'templates/*.tmpl'

route:
  group_by: ['alertname', 'cluster', 'service']
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 4h
  receiver: 'email'  # Default receiver as specified in globals
  
  routes:
    - match:
        severity: critical
      receiver: 'pagerduty'
      continue: true
      
    - match:
        severity: warning
      receiver: 'slack'
      continue: true
      
    - match:
        team: infrastructure
      receiver: 'ops-email'
      
    - match:
        team: application
      receiver: 'dev-email'

inhibit_rules:
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['alertname', 'cluster', 'service']

receivers:
  - name: 'email'
    email_configs:
      - to: 'alerts@dogwalker.local'
        send_resolved: true
        html: '{{ template "email.default.html" . }}'
        headers:
          subject: '{{ template "email.default.subject" . }}'

  - name: 'ops-email'
    email_configs:
      - to: 'ops@dogwalker.local'
        send_resolved: true
        html: '{{ template "email.default.html" . }}'
        headers:
          subject: '{{ template "email.default.subject" . }}'

  - name: 'dev-email'
    email_configs:
      - to: 'dev@dogwalker.local'
        send_resolved: true
        html: '{{ template "email.default.html" . }}'
        headers:
          subject: '{{ template "email.default.subject" . }}'

  - name: 'slack'
    slack_configs:
      - api_url: '${SLACK_API_URL}'  # Set via environment variable
        channel: '#alerts'
        send_resolved: true
        title: '{{ template "slack.default.title" . }}'
        text: '{{ template "slack.default.text" . }}'
        color: '{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}'

  - name: 'pagerduty'
    pagerduty_configs:
      - service_key: '${PAGERDUTY_SERVICE_KEY}'  # Set via environment variable
        send_resolved: true
        description: '{{ template "pagerduty.default.description" . }}'
        client: '{{ template "pagerduty.default.client" . }}'
        client_url: '{{ template "pagerduty.default.clientURL" . }}'
        severity: '{{ if eq .CommonLabels.severity "critical" }}critical{{ else }}warning{{ end }}'

  - name: 'webhook'
    webhook_configs:
      - url: 'http://internal-webhook:8080/alert'
        send_resolved: true
        http_config:
          basic_auth:
            username: '${WEBHOOK_USER}'  # Set via environment variable
            password: '${WEBHOOK_PASSWORD}'  # Set via environment variable
        max_alerts: 100

  - name: 'victorops'
    victorops_configs:
      - api_key: '${VICTOROPS_API_KEY}'  # Set via environment variable
        routing_key: 'ops-team'
        message_type: '{{ if eq .CommonLabels.severity "critical" }}CRITICAL{{ else }}WARNING{{ end }}'
        entity_display_name: '{{ template "victorops.default.message" . }}'
        state_message: '{{ template "victorops.default.state_message" . }}'

  - name: 'opsgenie'
    opsgenie_configs:
      - api_key: '${OPSGENIE_API_KEY}'  # Set via environment variable
        message: '{{ template "opsgenie.default.message" . }}'
        description: '{{ template "opsgenie.default.description" . }}'
        source: 'Alertmanager'
        tags: '{{ .CommonLabels.severity }}'
        note: 'Alert triggered by Prometheus'
        priority: '{{ if eq .CommonLabels.severity "critical" }}P1{{ else }}P2{{ end }}'