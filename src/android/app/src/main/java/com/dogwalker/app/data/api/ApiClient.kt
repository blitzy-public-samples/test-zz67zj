package com.dogwalker.app.data.api

import com.dogwalker.app.util.Constants.BASE_API_URL
import retrofit2.Retrofit  // v2.9.0
import retrofit2.converter.gson.GsonConverterFactory  // v2.9.0
import okhttp3.OkHttpClient  // v4.9.3
import java.util.concurrent.TimeUnit

/**
 * Human Tasks:
 * 1. Verify SSL certificate configuration for production environment
 * 2. Ensure proper authentication headers are configured in production
 * 3. Review and adjust timeout settings based on production requirements
 * 4. Configure proper logging levels for different build variants
 */

/**
 * ApiClient provides a configured Retrofit instance for making API calls to the backend services.
 * 
 * Requirement addressed: Backend Services (1.2 System Overview/Backend Services)
 * Implements the client-side configuration for interacting with the cloud-based microservices
 * architecture, handling API requests for bookings, users, walks, and payments.
 */
class ApiClient(private val retrofit: Retrofit) {

    companion object {
        /**
         * Creates and returns a configured instance of ApiClient with default settings.
         */
        fun create(): ApiClient {
            // Configure OkHttpClient with timeout settings
            val okHttpClient = OkHttpClient.Builder()
                .connectTimeout(Constants.TIMEOUT_DURATION, TimeUnit.MILLISECONDS)
                .readTimeout(Constants.TIMEOUT_DURATION, TimeUnit.MILLISECONDS)
                .writeTimeout(Constants.TIMEOUT_DURATION, TimeUnit.MILLISECONDS)
                .build()

            // Create Retrofit instance with base configuration
            val retrofit = Retrofit.Builder()
                .baseUrl(BASE_API_URL)
                .client(okHttpClient)
                .addConverterFactory(GsonConverterFactory.create())
                .build()

            return ApiClient(retrofit)
        }
    }

    /**
     * Interface defining all available API endpoints.
     * This interface is used by Retrofit to generate the implementation.
     */
    interface ApiService {
        // Note: Specific API endpoints will be added here as needed by other components
        // Common HTTP methods supported: @GET, @POST, @PUT, @DELETE, @PATCH
        // Example endpoint structure:
        // @GET("walks")
        // suspend fun getWalks(): Response<List<Walk>>
    }

    /**
     * Returns an implementation of the ApiService interface for making API calls.
     * 
     * @return ApiService implementation generated by Retrofit
     */
    fun getApiService(): ApiService {
        return retrofit.create(ApiService::class.java)
    }
}