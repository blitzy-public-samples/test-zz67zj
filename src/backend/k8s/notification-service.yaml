# Kubernetes deployment configuration for the Notification Service
# Requirement addressed: Deployment of Notification Service (7.2.1 Core Components/Notification Service)
# Ensures high availability and proper configuration of the Notification Service in the cluster

---
# ConfigMap for environment-specific configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: notification-service-config
  labels:
    app: notification-service
data:
  NOTIFICATION_SERVICE_PORT: "3000"
  NOTIFICATION_SERVICE_HOST: "0.0.0.0"
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  EMAIL_SMTP_PORT: "587"
  REDIS_PORT: "6379"
  REDIS_HOST: "redis-service"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: notification-service-secrets
  labels:
    app: notification-service
type: Opaque
data:
  # Note: Values should be base64 encoded in production
  FCM_API_KEY: ""
  APNS_KEY_ID: ""
  APNS_TEAM_ID: ""
  APNS_KEY_PATH: ""
  APNS_BUNDLE_ID: ""
  EMAIL_SMTP_HOST: ""
  EMAIL_SMTP_USER: ""
  EMAIL_SMTP_PASS: ""
  EMAIL_FROM_ADDRESS: ""
  REDIS_PASSWORD: ""
  FIREBASE_PROJECT_ID: ""
  FIREBASE_CLIENT_EMAIL: ""
  FIREBASE_PRIVATE_KEY: ""

---
# Deployment configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  labels:
    app: notification-service
spec:
  replicas: 3  # High availability with 3 replicas
  selector:
    matchLabels:
      app: notification-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: notification-service
    spec:
      containers:
      - name: notification-service
        image: dogwalker/notification-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        envFrom:
        - configMapRef:
            name: notification-service-config
        - secretRef:
            name: notification-service-secrets
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL

---
# Service configuration
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  labels:
    app: notification-service
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: notification-service

---
# HorizontalPodAutoscaler configuration
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: notification-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: notification-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# NetworkPolicy for securing service communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: notification-service-network-policy
spec:
  podSelector:
    matchLabels:
      app: notification-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api-gateway
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis-service
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 587  # SMTP
    - protocol: TCP
      port: 443  # HTTPS for FCM