# Kubernetes Secrets Configuration for Dog Walker Platform Backend Services
# Addresses requirement 7.4.3 Security Architecture: Secure Sensitive Data Management
# This Secret resource securely stores sensitive data such as database credentials, API keys, and JWT secrets

apiVersion: v1
kind: Secret
metadata:
  name: backend-secrets
  namespace: default
  labels:
    app: dog-walker-platform
    environment: production
  annotations:
    description: "Contains sensitive credentials and API keys for backend services"
type: Opaque
# Note: All secret values are base64 encoded in production
# The following are placeholder values that must be replaced with actual encoded secrets
data:
  # Database Credentials
  # Used by database services for authentication
  DB_PASSWORD: ZW5jcnlwdGVkX3ZhbHVl  # encrypted_value in base64
  
  # Cache Store Credentials
  # Used by Redis cache for authentication
  REDIS_PASSWORD: ZW5jcnlwdGVkX3ZhbHVl  # encrypted_value in base64
  
  # Authentication Secrets
  # Used by auth service for JWT token signing
  JWT_SECRET: ZW5jcnlwdGVkX3ZhbHVl  # encrypted_value in base64
  
  # External Service API Keys
  # Used for payment processing integration
  STRIPE_API_KEY: ZW5jcnlwdGVkX3ZhbHVl  # encrypted_value in base64
  
  # Communication Service Credentials
  # Used for sending notifications and emails
  EMAIL_API_KEY: ZW5jcnlwdGVkX3ZhbHVl  # encrypted_value in base64

---
# Human Tasks Required:
# 1. Replace all placeholder values with actual base64 encoded secrets before deployment
# 2. Ensure proper RBAC policies are in place to restrict access to these secrets
# 3. Set up proper key rotation policies for all secrets
# 4. Configure network policies to restrict which pods can access these secrets
# 5. Enable encryption at rest for etcd to secure secrets storage
# 6. Set up audit logging for secret access
# 7. Consider using external secret management solutions (e.g., HashiCorp Vault) for production